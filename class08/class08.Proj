---
title: "class08_RMarkdown"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

**30 Minutes late to lecture**

#Hieracrhical clustering in R
The `hclusst()` function requires a distance matrix as input. You can get this from the `dist()` function

```{r}
# First we need to calculate point (dis)similarity
# as the Euclidean distance between observations
dist_matrix <- dist(x)
# The hclust() function returns a hierarchical
# clustering model
h(c("c1","c2","c3"), each=50) )
plot(x, col=col)
```c <- hclust(d = dist_matrix)
# the print method is not so useful here
hc
Call:
hclust(d = dist_matrix)
Cluster method : complete
Distance : euclidean 
```



```{r}
# Step 1. Generate some example data for clustering
x <- rbind(
 matrix(rnorm(100, mean=0, sd = 0.3), ncol = 2), # c1
 matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2), # c2
 matrix(c(rnorm(50, mean = 1, sd = 0.3), # c3
 rnorm(50, mean = 0, sd = 0.3)), ncol = 2))
colnames(x) <- c("x", "y")
# Step 2. Plot the data without clustering
plot(x)
# Step 3. Generate colors for known clusters
# (just so we can compare to hclust results)
col <- as.factor( rep(c("c1","c2","c3"), each=50) )
plot(x, col=col)
```

```{r}
# clustering
hc<- hclust(dist(x))
# draw tree
plot(hc)
abline(h=2, col="red")
# cut tree into clusters/groups
grps <- cutree(hc, k=3)
grps
```

How many points in each cluster?
```{r}
table(grps)
```

Cross-tabulate (i.e. compare our clustering result with the known answer)

```{r}
table(grps, col)
```


#Principal Component Analysis (PCA)

Read some example gene expression data
```{r}
mydata <- read.csv("https://tinyurl.com/expression-CSV",
 row.names=1)

head(mydata)



```

How many genes are in this dataset?
```{r}
dim(mydata)
nrow(mydata)
```

Let's do PCA with the **prcomp()** function
```{r}
## lets do PCA
pca <- prcomp(t(mydata), scale=TRUE)
## A basic PC1 vs PC2 2-D plot
plot(pca$x[,1], pca$x[,2]) 
## A basic PC1 vs PC2 2-D plot
plot(pca$x[,1], pca$x[,2])
## Precent variance is often more informative to look at
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)

pca.var.per
 [1] 91.0 2.8 1.9 1.3 0.8 0.7 0.6 0.5 0.3 0.0
barplot(pca.var.per, main="Scree Plot",
 xlab="Principal Component", ylab="Percent Variation")


plot(pca$x[,1], pca$x[,2],
     col=c("red","red", "red", "red", "red",
           "blue","blue","blue","blue","blue"))

```

```{r}
plot(pca$x[,1], pca$x[,2]
     col=c("red","red", "red", "red", "red",
           "blue","blue","blue","blue","blue")
```


#UK foods file


```{r}
x <- read.csv("UK_foods.csv", row.names = 1)
x
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
pairs(x, col=rainbow(10), pch=16)
pca <- prcomp(t(x))
summary(pca)

# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```


